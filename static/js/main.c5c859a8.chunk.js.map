{"version":3,"sources":["components/Nav.js","components/About.js","components/Shop.js","components/itemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","NavStyle","color","textDecoration","to","style","className","About","Shop","useState","items","setItems","fetchItems","a","fetch","data","json","console","log","useEffect","map","item","key","itemId","name","Item","match","images","setItem","fetchItem","params","id","background","src","information","alt","Home","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQA2BeA,MAzBf,WACE,IAAMC,EAAW,CACfC,MAAO,QACPC,eAAgB,QAGlB,OACE,6BACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAOJ,GAClB,qCAEF,wBAAIK,UAAU,aACZ,kBAAC,IAAD,CAAMF,GAAG,SAASC,MAAOJ,GACvB,sCAEF,kBAAC,IAAD,CAAMG,GAAG,QAAQC,MAAOJ,GACtB,yCCTGM,MARf,WACE,OACE,6BACE,4C,gCC2BSC,MA7Bf,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAGRC,EAAU,uCAAG,8BAAAC,EAAA,sEACEC,MACjB,uDAFe,cACXC,EADW,gBAKGA,EAAKC,OALR,OAKXN,EALW,OAMjBO,QAAQC,IAAIR,EAAMK,MAClBJ,EAASD,EAAMK,MAPE,2CAAH,qDAchB,OAJAI,qBAAU,WACRP,MACC,IAGD,6BACE,yCACCF,EAAMU,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,QACZ,kBAAC,IAAD,CAAMnB,GAAE,gBAAWiB,EAAKE,SAAxB,IAAoCF,EAAKA,KAAKG,KAA9C,W,OCmBKC,MA1Cf,YAA0B,IAAVC,EAAS,EAATA,MAAS,EACCjB,mBAAS,CAC/BkB,OAAQ,KAFa,mBAChBN,EADgB,KACVO,EADU,KAMjBC,EAAS,uCAAG,8BAAAhB,EAAA,sEACGC,MAAM,sDAAD,OACgCY,EAAMI,OAAOC,KAFrD,cACVN,EADU,gBAIIA,EAAKT,OAJT,OAIVN,EAJU,OAKhBkB,EAAQlB,EAAMK,KAAKM,MALH,2CAAH,qDAyBf,OAjBAF,qBAAU,WACRU,OAiBA,6BACE,yCACA,4BAAKR,EAAKG,KAAV,KACA,yBAAKnB,MAAO,CAAE2B,WAAY,SACxB,yBAAKC,IAAKZ,EAAKM,OAAOO,YAAaC,IAAI,QCd/C,IAAMC,EAAO,WACX,OACE,6BACE,2CAKSC,EAxBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWjC,IAChC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,QAAQC,UAAWhC,IACrC,kBAAC,IAAD,CAAO+B,KAAK,YAAYC,UAAWf,QCLzBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.c5c859a8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nfunction Nav() {\n  const NavStyle = {\n    color: \"white\",\n    textDecoration: \"none\",\n  };\n\n  return (\n    <div>\n      <nav>\n        <Link to=\"/\" style={NavStyle}>\n          <h3>Logo</h3>\n        </Link>\n        <ul className=\"nav-links\">\n          <Link to=\"/about\" style={NavStyle}>\n            <li>About</li>\n          </Link>\n          <Link to=\"/shop\" style={NavStyle}>\n            <li>Shop</li>\n          </Link>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <div>\n      <h1>About Page</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Shop() {\n  const [items, setItems] = useState([]);\n\n  const fetchItems = async () => {\n    const data = await fetch(\n      \"https://fortnite-api.theapinetwork.com/upcoming/get\"\n    );\n\n    const items = await data.json();\n    console.log(items.data);\n    setItems(items.data);\n  };\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  return (\n    <div>\n      <h1>Shop Page</h1>\n      {items.map((item) => (\n        <h3 key={item.itemId}>\n          <Link to={`/shop/${item.itemId}`}> {item.item.name} </Link>\n        </h3>\n      ))}\n    </div>\n  );\n}\n\nexport default Shop;\n","import React, { useState, useEffect } from \"react\";\n\nfunction Item({ match }) {\n  const [item, setItem] = useState({\n    images: {},\n  });\n  //   const [images, setImages] = useState(\"\");\n\n  const fetchItem = async () => {\n    const Item = await fetch(\n      `https://fortnite-api.theapinetwork.com/item/get?id=${match.params.id}`\n    );\n    const items = await Item.json();\n    setItem(items.data.item);\n  };\n\n  useEffect(() => {\n    fetchItem();\n  });\n\n  //   const fetchImages = async () => {\n  //     const data = await fetch(\n  //       `https://fortnite-api.theapinetwork.com/item/get?id=${match.params.id}`\n  //     );\n  //     const image = await data.json();\n  //     setImages(image.data.item.images.information);\n  //     console.log(images);\n  //   };\n\n  //   useEffect(() => {\n  //     fetchImages();\n  //   });\n\n  return (\n    <div>\n      <h1>Shop Page</h1>\n      <h1>{item.name} </h1>\n      <div style={{ background: \"gray\" }}>\n        <img src={item.images.information} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Item;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Shop from \"./components/Shop\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Item from \"./components/itemDetail\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route exact path=\"/shop\" component={Shop} />\n          <Route path=\"/shop/:id\" component={Item} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Home page</h1>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}